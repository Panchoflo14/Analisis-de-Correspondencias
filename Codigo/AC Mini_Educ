# Análisis de Correspondencias Optimizado --------------------------------
# Noviembre 2024
# Carrera de Ciencia de datos
# Estadística IV
# Autores: Francisco Flores, Sebastián Reyes, Sebastián Enríquez

# Configuración General --------------------------------------------------
PATHS <- list(
  input_data = "C:\\Users\\panch\\OneDrive\\Documents\\PUCE\\Estadistica IV\\Trabajo Final\\Base_Mineduc_2009_2024.xlsx",
  output_base = "C:\\Users\\panch\\OneDrive\\Documents\\PUCE\\Estadistica IV\\Trabajo Final\\AC_Mini_Educ\\",
  descriptivos = "C:\\Users\\panch\\OneDrive\\Documents\\PUCE\\Estadistica IV\\Trabajo Final\\AC_Mini_Educ\\Descriptivos\\",
  biplots = "C:\\Users\\panch\\OneDrive\\Documents\\PUCE\\Estadistica IV\\Trabajo Final\\AC_Mini_Educ\\Biplots\\"
)

# Crear directorios si no existen
for (path in unlist(PATHS)) {
  if (!dir.exists(path)) dir.create(path, recursive = TRUE)
}

# Librerías --------------------------------------------------------------
required_packages <- c(
  "readxl", "dplyr", "ggplot2", "skimr", 
  "FactoMineR", "factoextra", "tidyr"
)

for (pkg in required_packages) {
  if (!require(pkg, character.only = TRUE)) install.packages(pkg)
  library(pkg, character.only = TRUE)
}

# *Carga de Datos --------------------------------------------------------
datos <- read_excel(PATHS$input_data)

# Preparación y Limpieza de Datos ----------------------------------------
datos <- datos %>%
  mutate(
    Año = as.integer(Año),
    Área = ifelse(is.na(Área), "Desconocido", Área),
    Jornada = ifelse(is.na(Jornada), "Otra", Jornada),
    across(c(Provincia, Sostenimiento, Jornada), as.character)
  )

# *Corrección de Variables -----------------------------------------------
datos$Área <- factor(datos$Área, levels = c("Urbana", "Rural", "Desconocido"))
datos$Jornada <- as.factor(datos$Jornada)  # Mantener valores originales
datos$Provincia <- as.factor(datos$Provincia)
datos$Sostenimiento <- factor(datos$Sostenimiento, 
                              levels = c("Particular", "Fiscal", "Fiscomisional", "Municipal", "Otro"))

# *Separación de Datos por Área ------------------------------------------
datos_urbano <- datos[datos$Área == "Urbana", ]
datos_rural <- datos[datos$Área == "Rural", ]

lista_datos_year <- split(datos, datos$Año)
lista_datos_urbano <- split(datos_urbano, datos_urbano$Año)
lista_datos_rural <- split(datos_rural, datos_rural$Año)

# Paletas de Colores -----------------------------------------------------
COLOR_PALETTES <- list(
  sostenimiento = c(
    "Particular" = "#87CEFA",     # Light Blue
    "Fiscal" = "#FF6347",         # Tomato Red
    "Fiscomisional" = "#FFA500",  # Orange
    "Municipal" = "#90EE90",      # Light Green
    "Otro" = "#DDA0DD"            # Plum
  ),
  jornada = c(
    "Matutina" = "#ADD8E6",       # Lighter Blue
    "Vespertina" = "#98FB98",     # Pale Green
    "Nocturna" = "#FFB6C1",       # Light Pink
    "Matutina y Vespertina" = "#FFDAB9",  # Peach Puff
    "Matutina y Nocturna" = "#E6E6FA",    # Lavender
    "Vespertina y Nocturna" = "#F0E68C",  # Khaki
    "Matutina, Vespertina y Nocturna" = "#D8BFD8",  # Thistle
    "Otra" = "#D3D3D3"            # Light Gray
  ),
  area = c(
    "Urbana" = "#8B0000",         # Dark Red
    "Rural" = "#00008B"           # Dark Blue
  )
)

# Verificación de Datos --------------------------------------------------
print("Distribución de Jornada:")
print(table(datos$Jornada))
print("Distribución de Área:")
print(table(datos$Área))

# Visualizaciones --------------------------------------------------------
# *Funciones de Visualización --------------------------------------------
plot_jornada_area <- function(data, title_suffix = "") {
  ggplot(data, aes(x = Jornada, fill = Jornada)) +
    geom_bar(position = "dodge", stat = "count") +
    scale_fill_manual(values = COLOR_PALETTES$jornada) +
    labs(title = paste("Distribución de Jornada", title_suffix),
         x = "Jornada", y = "Conteo", fill = "Jornada") +
    theme_minimal() +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1),
      plot.background = element_rect(fill = "white", color = NA)  # Fondo blanco
    ) +
    scale_y_continuous(labels = scales::comma)
}

plot_sostenimiento_provincia <- function(data, title_suffix = "") {
  ggplot(data, aes(x = Sostenimiento, fill = Sostenimiento)) +
    geom_bar() +
    facet_wrap(~ Provincia, scales = "free_y") +
    scale_fill_manual(values = COLOR_PALETTES$sostenimiento) +
    labs(title = paste("Distribución de Sostenimiento por Provincia", title_suffix),
         x = "Sostenimiento", y = "Conteo", fill = "Sostenimiento") +
    theme_minimal() +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1),
      legend.position = "bottom",
      plot.background = element_rect(fill = "white", color = NA)  # Fondo blanco
    ) +
    scale_y_continuous(labels = scales::comma)
}

# *Guardar Gráficos ------------------------------------------------------
ggsave(
  filename = file.path(PATHS$descriptivos, "jornada_area_general.png"),
  plot = plot_jornada_area(datos, "(General)"),
  width = 12, height = 8,
  bg = "white"  # Garantiza fondo blanco al guardar
)

ggsave(
  filename = file.path(PATHS$descriptivos, "sostenimiento_provincia_general.png"),
  plot = plot_sostenimiento_provincia(datos, "(General)"),
  width = 12, height = 8,
  bg = "white"  # Garantiza fondo blanco al guardar
)

ggsave(
  filename = file.path(PATHS$descriptivos, "jornada_area_urbana.png"),
  plot = plot_jornada_area(datos_urbano, "(Área Urbana)"),
  width = 12, height = 8,
  bg = "white"  # Garantiza fondo blanco al guardar
)

ggsave(
  filename = file.path(PATHS$descriptivos, "sostenimiento_provincia_urbana.png"),
  plot = plot_sostenimiento_provincia(datos_urbano, "(Área Urbana)"),
  width = 12, height = 8,
  bg = "white"  # Garantiza fondo blanco al guardar
)

ggsave(
  filename = file.path(PATHS$descriptivos, "jornada_area_rural.png"),
  plot = plot_jornada_area(datos_rural, "(Área Rural)"),
  width = 12, height = 8,
  bg = "white"  # Garantiza fondo blanco al guardar
)

ggsave(
  filename = file.path(PATHS$descriptivos, "sostenimiento_provincia_rural.png"),
  plot = plot_sostenimiento_provincia(datos_rural, "(Área Rural)"),
  width = 12, height = 8,
  bg = "white"  # Garantiza fondo blanco al guardar
)

# *Preparación de Datos para Direct CA -----------------------------------
ejecutar_ac_directo <- function(data, cols) {
  # Convert data into a frequency matrix
  freq_matrix <- xtabs(~ ., data = data[, cols])
  
  # Run Correspondence Analysis
  ac <- CA(freq_matrix, graph = FALSE)
  return(ac)
}

# *Visualización del Biplot ---------------------------------------
crear_biplot_ac <- function(ac, title_suffix = "") {
  # Crear biplot con factoextra
  biplot <- fviz_ca_biplot(ac, repel = TRUE) +
    labs(title = paste("Biplot del Análisis de Correspondencias", title_suffix),
         x = "Dimensión 1",
         y = "Dimensión 2") +
    theme_minimal() +
    theme(
      plot.background = element_rect(fill = "white", color = NA),  # Fondo blanco
      plot.title = element_text(hjust = 0.5)
    )
  return(biplot)
}

# *Preparación de Datos para AC por Año -----------------------------------
realizar_ac_por_año <- function(lista_datos, cols, area_suffix) {
  # Crear subcarpeta específica para el área
  area_folder <- file.path(PATHS$biplots, area_suffix)
  if (!dir.exists(area_folder)) dir.create(area_folder, recursive = TRUE)
  
  # Iterar sobre los años
  for (año in names(lista_datos)) {
    data_year <- lista_datos[[año]]
    
    # Verificar si hay datos suficientes
    if (nrow(data_year) < 2) {
      warning(paste("Datos insuficientes para el análisis en el año", año, "(", area_suffix, ")"))
      next  # Saltar al siguiente año
    }
    
    # Ejecutar CA directamente
    ac <- ejecutar_ac_directo(data_year, cols)
    
    # Verificar si el análisis tiene dimensiones válidas
    if (is.null(ac$eig) || nrow(ac$eig) < 2) {
      warning(paste("El Análisis de Correspondencias no generó dimensiones significativas para el año", año, "(", area_suffix, ")"))
      next  # Saltar al siguiente año
    }
    
    # Crear Biplot
    biplot <- crear_biplot_ac(ac, paste(area_suffix, " - Año", año))
    
    # Guardar resultados en la subcarpeta correspondiente
    saveRDS(ac, file = file.path(area_folder, paste0("ac_", tolower(area_suffix), "_", año, ".rds")))
    ggsave(
      filename = file.path(area_folder, paste0("biplot_", tolower(area_suffix), "_", año, ".png")),
      plot = biplot,
      width = 10, height = 8,
      bg = "white"  # Fondo blanco
    )
  }
}

# *Ejecución de AC por Año para Diferentes Bases -------------------------
# Variables de análisis
cols_prov_sost <- c("Provincia", "Sostenimiento")  # Provincia vs. Sostenimiento
cols_jorn_area <- c("Jornada", "Área")            # Jornada vs. Área

# AC General por Año
realizar_ac_por_año(lista_datos_year, cols_prov_sost, "General")
realizar_ac_por_año(lista_datos_year, cols_jorn_area, "General")

# AC Urbana por Año
realizar_ac_por_año(lista_datos_urbano, cols_prov_sost, "Urbano")
realizar_ac_por_año(lista_datos_urbano, cols_jorn_area, "Urbano")

# AC Rural por Año
realizar_ac_por_año(lista_datos_rural, cols_prov_sost, "Rural")
realizar_ac_por_año(lista_datos_rural, cols_jorn_area, "Rural")
